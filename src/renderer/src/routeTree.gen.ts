/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as VehiclesImport } from './routes/vehicles'
import { Route as SettingsImport } from './routes/settings'
import { Route as ServicesImport } from './routes/services'
import { Route as ReportsImport } from './routes/reports'
import { Route as InventoryImport } from './routes/inventory'
import { Route as CustomersImport } from './routes/customers'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const VehiclesRoute = VehiclesImport.update({
  id: '/vehicles',
  path: '/vehicles',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const ServicesRoute = ServicesImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => rootRoute,
} as any)

const ReportsRoute = ReportsImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => rootRoute,
} as any)

const InventoryRoute = InventoryImport.update({
  id: '/inventory',
  path: '/inventory',
  getParentRoute: () => rootRoute,
} as any)

const CustomersRoute = CustomersImport.update({
  id: '/customers',
  path: '/customers',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/customers': {
      id: '/customers'
      path: '/customers'
      fullPath: '/customers'
      preLoaderRoute: typeof CustomersImport
      parentRoute: typeof rootRoute
    }
    '/inventory': {
      id: '/inventory'
      path: '/inventory'
      fullPath: '/inventory'
      preLoaderRoute: typeof InventoryImport
      parentRoute: typeof rootRoute
    }
    '/reports': {
      id: '/reports'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof ReportsImport
      parentRoute: typeof rootRoute
    }
    '/services': {
      id: '/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof ServicesImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/vehicles': {
      id: '/vehicles'
      path: '/vehicles'
      fullPath: '/vehicles'
      preLoaderRoute: typeof VehiclesImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/customers': typeof CustomersRoute
  '/inventory': typeof InventoryRoute
  '/reports': typeof ReportsRoute
  '/services': typeof ServicesRoute
  '/settings': typeof SettingsRoute
  '/vehicles': typeof VehiclesRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/customers': typeof CustomersRoute
  '/inventory': typeof InventoryRoute
  '/reports': typeof ReportsRoute
  '/services': typeof ServicesRoute
  '/settings': typeof SettingsRoute
  '/vehicles': typeof VehiclesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/customers': typeof CustomersRoute
  '/inventory': typeof InventoryRoute
  '/reports': typeof ReportsRoute
  '/services': typeof ServicesRoute
  '/settings': typeof SettingsRoute
  '/vehicles': typeof VehiclesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/customers'
    | '/inventory'
    | '/reports'
    | '/services'
    | '/settings'
    | '/vehicles'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/customers'
    | '/inventory'
    | '/reports'
    | '/services'
    | '/settings'
    | '/vehicles'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/customers'
    | '/inventory'
    | '/reports'
    | '/services'
    | '/settings'
    | '/vehicles'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  CustomersRoute: typeof CustomersRoute
  InventoryRoute: typeof InventoryRoute
  ReportsRoute: typeof ReportsRoute
  ServicesRoute: typeof ServicesRoute
  SettingsRoute: typeof SettingsRoute
  VehiclesRoute: typeof VehiclesRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  CustomersRoute: CustomersRoute,
  InventoryRoute: InventoryRoute,
  ReportsRoute: ReportsRoute,
  ServicesRoute: ServicesRoute,
  SettingsRoute: SettingsRoute,
  VehiclesRoute: VehiclesRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/customers",
        "/inventory",
        "/reports",
        "/services",
        "/settings",
        "/vehicles"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/customers": {
      "filePath": "customers.tsx"
    },
    "/inventory": {
      "filePath": "inventory.tsx"
    },
    "/reports": {
      "filePath": "reports.tsx"
    },
    "/services": {
      "filePath": "services.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/vehicles": {
      "filePath": "vehicles.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
